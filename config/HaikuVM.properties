# Define default target (has to be in the configurations defined below).
# If you use haiku with *no* configuration option like this:
#  haiku -v HelloWorld.java
# then the following configuration is taken:
#
Config = arduino

# Allow some handy user aliases for property values.
#
# e.g.
#  aliases.for.Mode = (HAIKU_16_32 16/32)
# For property 'Mode' with known value 'HAIKU_16_32' set the alias '16/32'. (Map value '16/32' to 'HAIKU_16_32'.)
#
aliases.for.Mode = (HAIKU_16_16 16/16) (HAIKU_16_32 16/32) (HAIKU_32_64 32/64) (HAIKU_32_32 32/32)
aliases.for.Char = (HAIKU_CHAR_8 HAIKU_CHAR_1 1 8) (HAIKU_CHAR_16 HAIKU_CHAR_2 2 16)
aliases.for.Target = (atmega328p ATmega328p ATmega328P) (atmega8) (atmega16) (atmega32) (atmega32u4) (ubuntu) (X86) (arduinoIDE) (h8300)
aliases.for.GC = (HAIKU_NoGC) (HAIKU_ConservativGC HAIKU_StopTheWorldGC) (HAIKU_IncrementalGC)



#########################
# Configurations
#########################

# Start with 'root4c' as root of all configurations (where 'root' is a dummy link into hard coded values)
root4c.Extends = root
#root4c.AOTVariant = HAIKU_AOTBytecodeAsSwitch
root4c.AOTVariant = HAIKU_AOTBytecodeAsJump
#root4c.AOTVariant = HAIKU_AOTThreadedAsCall
#root4c.AOTVariant = HAIKU_AOTThreadedAsJump
root4c.Align = 1
root4c.MemorySize = 30000
root4c.InitialMainThreadStackSize = 500
root4c.InitialOtherThreadStackSize = 100
root4c.Mode = 32/64
root4c.Char = 16
root4c.GC = HAIKU_ConservativGC
# IncrementalGCSlice is only used if GC=HAIKU_IncrementalGC
root4c.IncrementalGCSlice = HAIKU_MemorySize/5
root4c.PanicExceptions = NullPointerException | NoSuchMethodError | OutOfMemoryError | ClassCastException | InternalError | ArrayIndexOutOfBoundsException | StackOverflowError | ArithmeticException
root4c.PanicSupport = 1
root4c.Extension = .undefined Extension
# relative to HAIKUVM_HOME/target/<Config>/
root4c.VM_BASE = ../../HaikuVM
# relative to HAIKUVM_HOME/
root4c.HAIKUVM4C = ./haikuVM
root4c.Output = $(HAIKU_APP_NAME)$(HAIKU_EXTENSION)
root4c.CFLAGS =
root4c.CLIBS =
root4c.CXX_OPT = ${HAIKU_CC_OPT}
root4c.LDFLAGS =
root4c.LINKER = $(HAIKU_CXX)
root4c.MillisPrescale = 64
root4c.MillisDividend =
root4c.MillisDivisor =

#
# Windows (tested with ms vc5)
#
pc.Extends = root4c
pc.AOTVariant = HAIKU_AOTBytecodeAsSwitch
pc.Target = X86
pc.CC = cl
pc.CXX = cl
pc.LINKER = link
pc.MicroKernel = haiku.pc.lib.HaikuMicroKernel
pc.Extension =.exe
#debug
pc.CC_OPT = -DWIN32 -Zp1 -W3 -MD -Fo"$@" -I"$(HAIKU_APP_BASE)" -I"$(HAIKU_VM_BASE)/src" -I"$(HAIKU_VM_BASE)/src/utility" -c "$<"
#release
#pc.CC_OPT = -DWIN32 -Zp1 -W3 -MT -Ox -Fo"$@" -I"$(HAIKU_APP_BASE)" -I"$(HAIKU_VM_BASE)" -c "$<"
pc.LDFLAGS = -OUT:"$(HAIKU_APP_NAME)".exe $(OBJS) $(USER_OBJS) $(HAIKU_CLIBS)
pc.PanicExceptions = 0xffff
pc.PanicSupport = 1
pc.Upload = echo "Program: "`ls -ltr $(HAIKU_APP_NAME).exe | cut -c 35-43` ; $(HAIKU_APP_NAME)

# pc16 as extension to pc to debug arduino images closely
pc16.InitialMainThreadStackSize = 142
pc16.InitialOtherThreadStackSize = 45
pc16.MemorySize = 4500
pc16.Mode = 16/32
pc16.Char = 8
pc16.PanicSupport = 0
pc16.Extends = pc

# WIN32 as synonym for pc but without internal exceptions
WIN32.PanicSupport = 0
WIN32.Extends = pc

#
# Unix with gcc
#
unix.Extends = root4c
unix.Target = ubuntu
unix.CC = gcc
unix.CXX = g++
unix.MicroKernel = haiku.pc.lib.HaikuMicroKernel
unix.Extension =
#debug
unix.CC_OPT  = -DUNIX -O0 -g3 -Wall -fmessage-length=0 -fpack-struct=1 -I"$(HAIKU_APP_BASE)" -I"$(HAIKU_VM_BASE)/src"  -I"$(HAIKU_VM_BASE)/src/utility" -c -o"$@" "$<"
#release
#unix.CC_OPT = -DUNIX -O3     -Wall -fmessage-length=0 -fpack-struct=1 -I"$(HAIKU_APP_BASE)" -I"$(HAIKU_VM_BASE)" -c -o"$@" "$<"
unix.LDFLAGS = -Wl,-Map,$(HAIKU_APP_NAME).map -Wl,--gc-sections -o"$(HAIKU_APP_NAME)" -lc -lm $(OBJS) $(USER_OBJS) $(HAIKU_CLIBS) $(LIBS)
#Don't upload. Just start direct.
unix.Upload = ./$(HAIKU_APP_NAME)

linux32.Extends = unix

linux64.Extends = unix


#
# cygwin
# 1) With java sdk on windows
#   Open cygwin shell and call with windows pathes and bat-files (but unix slashes)
#   C:/haikuVM/bin/haiku.bat -v --Config cygwin -classpath "C:/haikuVM/examples/src/main/java/;C:/haikuVM/haikuBench/src/main/java" C:/haikuVM/examples/src/main/java/arduino/tutorial/HelloWorldJava.java
#
# 2) With java sdk on cygwin
# ???
#
cygwin.Extends = unix

junit.cygwin.Extends = unix
junit.cygwin.Upload = echo Program: $(HAIKU_APP_NAME); $(HAIKU_APP_NAME) | tee result.txt
junit.cygwin.MemorySize = 3000
junit.cygwin.Mode = 16/32
junit.cygwin.Char = 8
junit.cygwin.InitialMainThreadStackSize = 142
junit.cygwin.InitialOtherThreadStackSize = 45
junit.cygwin.PanicExceptions = NullPointerException | NoSuchMethodError | OutOfMemoryError | ClassCastException | InternalError | ArithmeticException
junit.cygwin.PanicSupport = 0

#
# minimal AVR configuration
#
avr.Extends = root4c
avr.Target = atmega8
#Nicer to have MemorySize flexible (HAIKU_16_16==0)->300 .. (HAIKU_32_64==4)->500
avr.MemorySize = (RAMEND-0x100) - (300+HAIKU_Mode*50)
avr.Clock = 8000000
avr.TimerInterrupt = TIMER0_OVF_vect
avr.InitialMainThreadStackSize = 142
avr.InitialOtherThreadStackSize = 45
avr.Mode = 16/32
avr.Char = 8
avr.PanicExceptions = NullPointerException | NoSuchMethodError | OutOfMemoryError | ClassCastException | InternalError | ArithmeticException
avr.PanicSupport = 0
avr.CC = avr-gcc
avr.CXX = avr-g++
avr.LINKER = avr-g++
avr.CC_OPT  = $(HAIKU_CFLAGS) -c -Wall -Os -fno-builtin -fomit-frame-pointer -fno-exceptions -fshort-enums -std=gnu99 -funsigned-char -funsigned-bitfields -ffunction-sections -fdata-sections -mmcu=$(HAIKU_TARGET) -DNEW_FOR_AVRGCC -DF_CPU=$(HAIKU_CLOCK)UL -I'$(HAIKU_APP_BASE)' -I'$(HAIKU_VM_BASE)/src' -I'$(HAIKU_VM_BASE)/src/utility' -o'$@' '$<'
avr.CXX_OPT = $(HAIKU_CFLAGS) -c -Wall -Os -fno-builtin -fomit-frame-pointer -fno-exceptions -fshort-enums            -funsigned-char -funsigned-bitfields -ffunction-sections -fdata-sections -mmcu=$(HAIKU_TARGET) -DNEW_FOR_AVRGCC -DF_CPU=$(HAIKU_CLOCK)UL -I'$(HAIKU_APP_BASE)' -I'$(HAIKU_VM_BASE)/src' -I'$(HAIKU_VM_BASE)/src/utility' -o'$@' '$<'
avr.LDFLAGS = -Wl,-Map,$(HAIKU_APP_NAME).map -Wl,--gc-sections -lc -lm -mmcu=$(HAIKU_TARGET) -o'$(HAIKU_APP_NAME).elf' $(OBJS) $(USER_OBJS) $(HAIKU_CLIBS) $(LIBS)
#avr.CLIBS = -lc
avr.Extension = .hex
avr.MicroKernel = haiku.avr.lib.simple010.HaikuMicroKernel
avr.Port = -P com7
avr.Programmer = stk500v1
avr.Baud = 57600
avr.Upload = avrdude -p $(HAIKU_TARGET) -c $(HAIKU_PROGRAMMER) $(HAIKU_PORT) -b $(HAIKU_BAUD) -U flash:w:$(HAIKU_OUTPUT)


arduino.Extends = avr
arduino.Target = atmega328p
arduino.Clock = 16000000
arduino.MicroKernel = haiku.avr.lib.arduino.HaikuMicroKernelEx
#arduino.MicroKernel = haiku.pc.lib.HaikuMicroKernel
avr.Programmer = stk500v1
avr.Baud = 115200


#
# lego RCX
#
rcx.Extends = unix
rcx.Target = h8300
rcx.Align = 2
rcx.PanicSupport = 0
rcx.GenerateFullVM = 0
rcx.CC = h8300-hms-gcc
rcx.CXX = h8300-hms-g++
rcx.BOOTCLASSPATH =  $(NXJ_HOME)/xlib/nxt/classes.jar
rcx.CC_OPT  = -DRCX $(HAIKU_CFLAGS) -c -Wall -O3 -fno-builtin -fomit-frame-pointer -fno-exceptions -fshort-enums -std=gnu99 -funsigned-char -funsigned-bitfields -I'$(HAIKU_APP_BASE)' -I'$(HAIKU_VM_BASE)/src' -I'$(HAIKU_VM_BASE)/src/utility' -o'$@' '$<'
rcx.CXX_OPT = -DRCX $(HAIKU_CFLAGS) -c -Wall -O3 -fno-builtin -fomit-frame-pointer -fno-exceptions -fshort-enums            -funsigned-char -funsigned-bitfields -I'$(HAIKU_APP_BASE)' -I'$(HAIKU_VM_BASE)/src' -I'$(HAIKU_VM_BASE)/src/utility' -o'$@' '$<'
#rcx.LDFLAGS= -Map $(HAIKU_APP_NAME).map --gc-sections -T'C:/haikuVM/hardware/tools/h8300/rcx.lds' --oformat coff-h8300 -LC:/leJOS_RCX/rcx_impl/lib -LC:/h8300-win32/usr/local/lib/gcc-lib/h8300-hms/3.3.1 -LC:/leJOS_RCX/rcx_impl/float --defsym=__start=0x8000 $(OBJS) $(USER_OBJS) $(HAIKU_CLIBS) -o $(HAIKU_APP_NAME).rcx -lrcx -lfloat -lc
#rcx.LDFLAGS= -Map $(HAIKU_APP_NAME).map -T'C:/haikuVM/hardware/tools/h8300/rcx.lds'  --defsym=__start=0x8000 --oformat coff-h8300 -LC:/h8300-win32/usr/local/lib/gcc-lib/h8300-hms/3.3.1 $(OBJS) $(USER_OBJS) $(HAIKU_CLIBS) -o $(HAIKU_APP_NAME).rcx -lgcc -lc
rcx.LINKER =  h8300-hms-ar
rcx.LDFLAGS = rcs lib$(HAIKU_APP_NAME).a $(OBJS) $(USER_OBJS) $(HAIKU_CLIBS)
rcx.Mode = 32/32
#rcx.AOTVariant = HAIKU_AOTBytecodeAsSwitch
rcx.AOTVariant = HAIKU_AOTBytecodeAsJump
rcx.MemorySize = 5000
rcx.Extension = .srec
rcx.MicroKernel = haiku.rcx.HaikuMicroKernel
#rcx.MicroKernel = haiku.rcx.retro.HaikuMicroKernel
#rcx.MicroKernel = haiku.rcx.HaikuMicroKernel4JUnits
#rcx.Port = COM8
rcx.Port = \\\\\\.\\COM16
#rcx.Port = /dev/ttyS15
#rcx.Port = /dev/com17
#rcx.Upload = java -Djava.library.path="%LEJOS_HOME%\bin" -classpath "%LEJOS_HOME%\lib\jtools.jar;%THIRDPARTY_LIBS%\commons-cli-1.0.jar;%LEJOS_HOME%\lib\pcrcxcomm.jar" js.tools.Firmdl --tty %RCXTTY% %1 %2 %3 %4 %5 %6 %7 %8 %9
#rcx.Upload  = java -Djava.library.path="%LEJOS_HOME%/bin" -classpath "%LEJOS_HOME%/lib/jtools.jar;%THIRDPARTY_LIBS%/commons-cli-1.0.jar;%LEJOS_HOME%/lib/pcrcxcomm.jar" js.tools.Firmdl --tty $(HAIKU_TARGET)
#rcx.Upload  = C:/leJOS_RCX/bin/lejosfirmdl --debug --tty=$(HAIKU_PORT) $(HAIKU_APP_NAME)$(HAIKU_EXTENSION)

# This is not a failure (but often a show stopper): /cygdrive/c/leJOS_RCX/bin//lejosfirmdl: unlock firmware failed
# Therefor I prefixed with a - (hyphen)
# trying to barrier the ERRORLEVEL in make
rcx.Upload  = - lejosfirmdl --tty=$(HAIKU_PORT) $(HAIKU_APP_NAME)$(HAIKU_EXTENSION)
#rcx.Upload  = - lejosfirmdl --tty=$(HAIKU_PORT) diff.srec


#
# ARDUINO wiring: setup(); loop();
#
wiring.Extends = avr
wiring.Target = atmega328p
wiring.Clock = 16000000
wiring.MicroKernel = haiku.avr.lib.arduino.HaikuMicroKernel

#
# ARDUINO: main(); init(); 57600 baud; System.in/out
#
#
duemilanove.Extends = arduino

duemilanove.UsingCLIB.Extends = duemilanove
duemilanove.UsingCLIB.MicroKernel = haiku.avr.lib.arduino.HaikuMicroKernelProcessing
duemilanove.UsingCLIB.CFLAGS = -I'${HAIKU_HOME}/lib/includes/arduino/cores/arduino' -I'${HAIKU_HOME}/lib/includes/arduino/variants/standard'
duemilanove.UsingCLIB.CLIBS = -L'${HAIKU_HOME}/lib/clibs' -lduemilanove_atmega328 -lc
duemilanove.UsingCLIB.TimerInterrupt = undef

# Just a synonym because it was used in the Java Magazine examples
duemilanove.ProcessingCLIB.Extends = duemilanove.UsingCLIB

#Cross compile from Raspberry Pi 3 to the Duemilanove 
pi.duemilanove.Extends = avr
pi.duemilanove.Target = atmega328p
pi.duemilanove.CC = /usr/bin/avr-gcc
pi.duemilanove.CXX = /usr/bin/avr-g++
pi.duemilanove.LINKER = /usr/bin/avr-g++
pi.duemilanove.Upload = /usr/bin/avrdude -p $(HAIKU_TARGET) -c arduino -P $(HAIKU_PORT) -b 115200 -U flash:w:$(HAIKU_OUTPUT)

arduinoIDE.Extends = avr
arduinoIDE.Extension =
arduinoIDE.Target = arduinoIDE
arduinoIDE.MicroKernel = haiku.avr.lib.arduino.HaikuMicroKernel4ArduinoIDE
arduinoIDE.Upload = @echo 'Please (re-)start the Arduino IDE for compile and upload: File->Examples->ArduinoSketch->HaikuVM'
arduinoIDE.CC = @echo Please use Arduino IDE for compile step
arduinoIDE.CXX = @echo Please use Arduino IDE for compile step
arduinoIDE.LINKER = NONE
arduinoIDE.TimerInterrupt = undef
arduinoIDE.CC_OPT = undef
arduinoIDE.CFLAGS = undef
arduinoIDE.CLIBS = undef
arduinoIDE.CXX_OPT = undef
arduinoIDE.Clock = undef
arduinoIDE.LDFLAGS = undef
arduinoIDE.Clock = undef
#arduinoIDE.MemorySize = undef
arduinoIDE.MemorySize = (RAMEND-0x100) - (700+HAIKU_Mode*50)
arduinoIDE.MillisDividend = undef
arduinoIDE.MillisDivisor = undef
arduinoIDE.MillisPrescale = undef
arduinoIDE.Port = undef
arduinoIDE.UserMain = justDefined

arduinoIDEUpload.Extends = arduinoIDE
# Nice but has a problem on WIN 8: arduinoIDEUpload.Upload = @echo 'compile and upload using arduino with last port and board settings'; cd ../../..; arduino --upload 'libraries/HaikuVM/ArduinoSketch/HaikuVM/HaikuVM.ino'
arduinoIDEUpload.Upload = # see haiku.bat near line 198 > arduino_debug --upload libraries/HaikuVM/examples/HaikuVM/HaikuVM.ino

arduinoIDEWithMainUpload.Extends = arduinoIDEUpload
arduinoIDEWithMainUpload.MicroKernel = haiku.avr.lib.arduino.HaikuMicroKernelEx

#
# for JUNIT tests of virtual every JUNIT
# Used with: Duemilanove, Yun, Micro, Leonardo
#
arduinoIDEWithMainUsingSystemUpload.Extends = arduinoIDEUpload
arduinoIDEWithMainUsingSystemUpload.MicroKernel = haiku.avr.lib.arduino.HaikuMicroKernel4ArduinoIDEWithMainUsingSystem

arduinoIDEVerify.Extends = arduinoIDEUpload
# Nice but has a problem on WIN 8: arduinoIDEVerify.Upload = @echo 'compile and verify using arduino with last board settings'; cd ../../..; arduino --verify 'libraries/HaikuVM/ArduinoSketch/HaikuVM/HaikuVM.ino'
arduinoIDEVerify.Upload = # see haiku.bat near line 198 > arduino --verify 'libraries/HaikuVM/examples/HaikuVM/HaikuVM.ino'

arduinoIDE4Attiny.Extends = arduinoIDE
arduinoIDE4Attiny.MemorySize = 90
arduinoIDE4Attiny.InitialMainThreadStackSize = 21
arduinoIDE4Attiny.InitialOtherThreadStackSize = 10
arduinoIDE4Attiny.GC = HAIKU_NoGC
arduinoIDE4Attiny.MicroKernel = haiku.avr.lib.arduino.HaikuMicroKernel4TinyArduinoIDE
arduinoIDE4Attiny.PanicExceptions = 0x0
arduinoIDE4Attiny.PanicSupport = 0


#
# Default is ARDUINO
# (because I own one)
#
mytarget.Extends = arduino

#
# for JUNIT tests of virtual every JUNIT
# Used with: Duemilanove, Yun, Micro, Leonardo
#
esp8266-arduinoIDEWithMainUsingSystemUpload.Extends = arduinoIDEWithMainUsingSystemUpload
esp8266-arduinoIDEWithMainUsingSystemUpload.Align = 4
esp8266-arduinoIDEWithMainUsingSystemUpload.Mode = 32/32
esp8266-arduinoIDEWithMainUsingSystemUpload.AOTVariant = HAIKU_AOTBytecodeAsJump
esp8266-arduinoIDEWithMainUsingSystemUpload.MemorySize = 5000

esp8266-arduinoIDEUpload.Extends = esp8266-arduinoIDEWithMainUsingSystemUpload
esp8266-arduinoIDEUpload.MicroKernel = haiku.avr.lib.arduino.HaikuMicroKernel4ArduinoIDE

#
# ASURO Retro
#
# A little ASURO retro feeling. Here JAVA is very close to programming with C and ASURO lib 2.8.0rc1.
#
# Caution:
# - Don't forget to call Init() in main(..)!
# - No System.out.println(..)!! Instead PrintInt(..), PrintLong(..), SerPrint(..) etc. from ASURO lib!
asuro.Extends = avr
asuro.Target = atmega8
asuro.Clock = 8000000
asuro.Upload = cmd /c start ASUROFlash155
asuro.MicroKernel = haiku.avr.lib.asuro.lib2_8_0_rc1.HaikuMicroKernel
asuro.PanicExceptions = 0
asuro.AsuroTiming = 1
asuro.TimerInterrupt = SIG_OVERFLOW2

#
# ASURO NanoVM
#
nanovm.Extends = asuro
nanovm.MicroKernel = haiku.avr.lib.asuro.nanovm.HaikuMicroKernel

# NIBObee
nibobee.Extends = avr
nibobee.Target = atmega16
nibobee.Clock = 15000000
nibobee.MicroKernel = haiku.avr.lib.simple010.HaikuMicroKernel
nibobee.Upload = NIBObeeProgrammer.exe

#
# simple010 Configuration
#
simple010.Extends = avr
simple010.Target = atmega328p
simple010.Clock = 16000000
simple010.MicroKernel = haiku.avr.lib.simple010.HaikuMicroKernel

#
# Gertboard Configuration
#
# More info on the Gertboard can be found here:
# https://projects.drogon.net/raspberry-pi/gertboard/
#
gertboard.Extends = avr
gertboard.Target = atmega328p
gertboard.Clock = 12000000
gertboard.MicroKernel = haiku.avr.lib.arduino.HaikuMicroKernelEx
gertboard.Programmer = gpio
gertboard.Port = undef

#
# leonardo Configuration
#
leonardo.Extends = avr
leonardo.Target = atmega32u4
# leonardo has 2.5k of SRAM so I use (a defensive amount of) 2000 bytes for JAVA
leonardo.Clock = 16000000
leonardo.MicroKernel = haiku.avr.lib.simple010.HaikuMicroKernel
leonardo.Port = -P com5
leonardo.Programmer = avr109

leonardo.UsingCLIB.Extends = leonardo
leonardo.UsingCLIB.MicroKernel = haiku.avr.lib.arduino.HaikuMicroKernelProcessing
leonardo.UsingCLIB.CFLAGS = -I'${HAIKU_HOME}/lib/includes/arduino/cores/arduino' -I'${HAIKU_HOME}/lib/includes/arduino/variants/leonardo'
leonardo.UsingCLIB.CLIBS = -L'${HAIKU_HOME}/lib/clibs' -lleonardo -lc
leonardo.UsingCLIB.TimerInterrupt = undef
leonardo.UsingCLIB.Upload = read -t 6 -p "Please press the ## R E S E T ## button on the Leonardo";         avrdude -v -v -p$(HAIKU_TARGET) -cavr109 -P$(HAIKU_PORT) -b57600 -D -U flash:w:$(HAIKU_OUTPUT)

#
# Change myboard to your Arduino board
#
#myboard.Extends = leonardo.UsingCLIB
myboard.Extends = duemilanove

arduinoIDETeensy.Extends = arduinoIDE
arduinoIDETeensy.MemorySize = 5000
arduinoIDETeensy.MicroKernel = haiku.avr.lib.arduino.HaikuMicroKernel4ArduinoIDEWithMainUsingSystem
arduinoIDETeensy.Align = 4
arduinoIDETeensy.Mode = 32/32
arduinoIDETeensy.AOTVariant = HAIKU_AOTBytecodeAsJump

#
# Teensyduino configuration
#
teensyduino.Extends = root4c
teensyduino.CPUARCH = cortex-m4
teensyduino.MCU = MK64FX512
teensyduino.Lower_MCU = $(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$(HAIKU_MCU)))))))))))))))))))))))))))
teensyduino.Target = atmega328p
teensyduino.MCU_LD = $(HAIKU_LOWER_MCU).ld
teensyduino.MemorySize = 5000
teensyduino.Clock = 120000000
teensyduino.PanicExceptions = NullPointerException | NoSuchMethodError | OutOfMemoryError | ClassCastException | InternalError | ArithmeticException
teensyduino.CC = arm-none-eabi-gcc
teensyduino.CXX = arm-none-eabi-g++
teensyduino.LINKER = arm-none-eabi-gcc
teensyduino.ArduinoDir = C:/Program Files (x86)/Arduino
teensyduino.ArduinoCore = hardware/teensy/avr/cores/teensy3
teensyduino.CFLAGS = -DUSB_SERIAL -DLAYOUT_US_ENGLISH -DUSING_MAKEFILE -D__$(HAIKU_MCU)__ -DARDUINO=10805 -DTEENSYDUINO=144 -DF_CPU=$(HAIKU_CLOCK)
teensyduino.CC_OPT  = $(HAIKU_CFLAGS) -c -O2 -Wall -ffunction-sections -fdata-sections -nostdlib -mthumb -MMD -mcpu=$(HAIKU_CPUARCH) -mfloat-abi=hard -mfpu=fpv4-sp-d16 -fsingle-precision-constant  -I'$(HAIKU_APP_BASE)' -I'$(HAIKU_ARDUINODIR)/$(HAIKU_ARDUINOCORE)' -I'$(HAIKU_VM_BASE)/src' -I'$(HAIKU_VM_BASE)/src/utility' -o'$@' '$<'
teensyduino.CXX_OPT = $(HAIKU_CFLAGS) -c -O2 -Wall -ffunction-sections -fdata-sections -nostdlib -fno-exceptions -felide-constructors -std=gnu++14 -Wno-error=narrowing -fno-rtti -mthumb -mcpu=$(HAIKU_CPUARCH) -mfloat-abi=hard -mfpu=fpv4-sp-d16 -fsingle-precision-constant -I'$(HAIKU_APP_BASE)' -I'$(HAIKU_ARDUINODIR)/$(HAIKU_ARDUINOCORE)' -I'$(HAIKU_VM_BASE)/src' -I'$(HAIKU_VM_BASE)/src/utility' -o'$@' '$<'
teensyduino.LDFLAGS = -O2 -lstdc++ -Wl,--gc-sections,--relax,--defsym=__rtc_localtime=0 -lm -mcpu=$(HAIKU_CPUARCH) -mfloat-abi=hard -mfpu=fpv4-sp-d16 -fsingle-precision-constant -o'$(HAIKU_APP_NAME).elf' -mthumb -T'$(HAIKU_ARDUINODIR)/$(HAIKU_ARDUINOCORE)/$(HAIKU_MCU_LD)' $(OBJS) $(USER_OBJS) $(HAIKU_CLIBS) $(LIBS)
teensyduino.Extension = .hex
#teensyduino.MicroKernel = haiku.avr.lib.arduino.HaikuMicroKernelEx
teensyduino.MicroKernel = haiku.avr.lib.arduino.HaikuMicroKernel4ArduinoIDEWithMainUsingSystem
#teensyduino.MicroKernel = haiku.avr.lib.arduino.HaikuMicroKernel4ArduinoIDEWithMain
teensyduino.Upload = teensy_loader_cli -mmcu=$(HAIKU_LOWER_MCU) -w -v $(HAIKU_OUTPUT)
teensyduino.Align = 4
teensyduino.Mode = 32/32
teensyduino.AOTVariant = HAIKU_AOTBytecodeAsJump
teensyduino.UserMain = justDefined

#
# Teensyduino configuration using Arduino toolchain
#
teensyduinoVSCode.Extends = arduinoIDE
teensyduinoVSCode.MicroKernel = haiku.avr.lib.arduino.HaikuMicroKernel4ArduinoIDEWithMainUsingSystem
teensyduinoVSCode.MemorySize = 5000
teensyduinoVSCode.Align = 4
teensyduinoVSCode.Mode = 32/32
teensyduinoVSCode.AOTVariant = HAIKU_AOTBytecodeAsJump
teensyduinoVSCode.UserMain = justDefined
